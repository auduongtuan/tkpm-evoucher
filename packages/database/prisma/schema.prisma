// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  phone     String    @unique
  fullName  String
  // posts    Post[]
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vouchers  Voucher[]
}

model Employee {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  phone       String    @unique
  fullName    String
  password    String
  systemAdmin Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  merchantId  Int?
  merchant    Merchant? @relation(fields: [merchantId], references: [id])
}

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

model Game {
  id          Int                @id @default(autoincrement())
  slug        String
  description String?
  name        String
  image       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  campaigns   GamesOnCampaigns[]
}

model Campaign {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  startedAt   DateTime
  endedAt     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  games       GamesOnCampaigns[]
  merchantId  Int
  merchant    Merchant            @relation(fields: [merchantId], references: [id])
  vouchers    Voucher[]
  stores      CampaignsOnStores[]
}

model GamesOnCampaigns {
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     Int // relation scalar field (used in the `@relation` attribute above)
  campaignId Int // relation scalar field (used in the `@relation` attribute above)
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  assignedAt DateTime @default(now())
  configs    String?
  // assignedBy String

  @@id([gameId, campaignId])
}

model Merchant {
  id        Int        @id @default(autoincrement())
  name      String
  image     String?
  campaigns Campaign[]
  stores    Store[]
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Category {
  id        Int                  @id @default(autoincrement())
  name      String               @unique
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  stores    CategoriesOnStores[]
}

model Store {
  id         Int                  @id @default(autoincrement())
  name       String
  address    String
  lat        Float
  lng        Float
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  merchantId Int
  merchant   Merchant             @relation(fields: [merchantId], references: [id])
  campaigns  CampaignsOnStores[]
  categories CategoriesOnStores[]
}

model CategoriesOnStores {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    Int // relation scalar field (used in the `@relation` attribute above)
  // assignedBy String
  createdAt  DateTime @default(now())

  @@id([categoryId, storeId])
}

enum DiscountType {
  FIXED
  PERCENT
}

model Voucher {
  id            Int          @id @default(autoincrement())
  couponCode    String       @unique
  campaign      Campaign     @relation(fields: [campaignId], references: [id])
  discountType  DiscountType
  discountValue Float
  maxDiscount   Float?
  expiredAt     DateTime?
  campaignId    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
}

model CampaignsOnStores {
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int // relation scalar field (used in the `@relation` attribute above)
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    Int // relation scalar field (used in the `@relation` attribute above)
  // assignedBy String
  createdAt  DateTime @default(now())

  @@id([campaignId, storeId])
}
